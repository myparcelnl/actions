name: 'Run PDK app builder'
description: 'Run @myparcel-pdk/app-builder'

inputs:
  app-id:
    required: false
    description: 'The app ID of the app. Needed when writing a report.'

  private-key:
    required: false
    description: 'The private key of the app. Needed when writing a report.'

  image:
    description: 'PHP Docker image to use. Required to update myparcelnl/pdk.'
    required: false

  no-commit:
    description: 'Do not commit changes'
    required: false
    default: 'false'

  no-check:
    description: 'Skip checking whether the lockfile is modified.'
    required: false
    default: 'false'

  commit-type:
    description: 'Commit type'
    required: false
    default: 'auto'

  report:
    description: 'Report the changes made by the command'
    required: false
    default: 'true'

  report-file:
    description: 'Filename of the report file'
    required: false
    default: 'upgrade-report.json'

  args:
    description: 'Additional arguments to pass to the command'
    required: false

runs:
  using: composite
  steps:
    - name: 'Check latest available versions'
      uses: actions/github-script@v6
      id: versions
      with:
        # language=javascript
        script: |
          const pdkRelease = await github.repos.getLatestRelease({
            owner: 'myparcelnl',
            repo: 'pdk'
          });

          const jsPdkReleases = await github.repos.listReleases({
            owner: 'myparcelnl',
            repo: 'js-pdk'
          });

          const APP_BUILDER = "@myparcel-pdk/app-builder";

          const lastAppBuilderRelease = jsPdkReleases.data.find((release) => release.name.includes(APP_BUILDER));
          const lastOtherRelease = jsPdkReleases.data.find((release) => !release.name.includes(APP_BUILDER));

          core.setOutput('pdk-version', pdkRelease.data.tag_name);
          core.setOutput('app-builder-version', lastAppBuilderRelease.data.tag_name);
          core.setOutput('js-pdk-version', lastOtherRelease.data.tag_name);

    - name: 'Check if upgrades are needed'
      id: upgrade-check
      shell: bash
      env:
        PDK_VERSION: ${{ steps.versions.outputs.pdk-version }}
        APP_BUILDER_VERSION: ${{ steps.versions.outputs.app-builder-version }}
        JS_PDK_VERSION: ${{ steps.versions.outputs.js-pdk-version }}
      # language=bash
      run: |
        APP_BUILDER_VERSION=$(echo $APP_BUILDER_VERSION | cut -d'@' -f2)
        JS_PDK_PACKAGE=$(echo $JS_PDK_VERSION | cut -d'@' -f1)
        JS_PDK_VERSION=$(echo $JS_PDK_VERSION | cut -d'@' -f2)

        CURRENT_PDK_VERSION=$(cat composer.lock | jq -r '.packages[] | select(.name == "myparcelnl/pdk") | .version')

        function check-yarn-upgrade() {
          package=$1
          version=$2

          yarn npm info $package --json | jq -r '.version' | grep -q "$version" && echo 'false' || echo 'true'
        }

        NEEDS_APP_BUILDER_UPGRADE=$(check-yarn-upgrade "@myparcel-pdk/app-builder" "$APP_BUILDER_VERSION")        
        NEEDS_ALL_UPGRADE=$(check-yarn-upgrade "$JS_PDK_PACKAGE" "$JS_PDK_VERSION")
        NEEDS_PDK_UPGRADE=$(echo $CURRENT_PDK_VERSION | grep -q "$PDK_VERSION" && echo 'false' || echo 'true')

        echo "needs-app-builder-upgrade=$NEEDS_APP_BUILDER_UPGRADE" >> $GITHUB_OUTPUT
        echo "needs-all-upgrade=$NEEDS_ALL_UPGRADE"                 >> $GITHUB_OUTPUT
        echo "needs-pdk-upgrade=$NEEDS_PDK_UPGRADE"                 >> $GITHUB_OUTPUT

    - name: 'Create empty report file'
      if: inputs.report == 'true'
      shell: bash
      env:
        REPORT_FILE: ${{ inputs.report-file }}
      #language=bash
      run: echo '[]' > $REPORT_FILE

    - name: 'Create arguments'
      id: arguments
      env:
        ARGS: ${{ inputs.args }}
        COMMIT_TYPE: ${{ inputs.commit-type }}
        NO_CHECK: ${{ inputs.no-check }}
        NO_COMMIT: ${{ inputs.no-commit }}
        REPORT: ${{ inputs.report }}
        REPORT_FILE: ${{ inputs.report-file }}
      shell: bash
      #language=bash
      run: |
        args="$ARGS --commit-type=$COMMIT_TYPE --report-file=$REPORT_FILE"

        if [ "$REPORT" == 'true' ]; then
          args="$args --report"
        fi

        if [ "$NO_CHECK" == 'true' ]; then
          args="$args --no-check"
        fi

        if [ "$NO_COMMIT" == 'true' ]; then
          args="$args --no-commit"
        fi

        echo "args=$args" >> $GITHUB_OUTPUT

    - name: 'Upgrade @myparcel-pdk/app-builder'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.upgrade-check.outputs.needs-app-builder-upgrade == 'true'
      with:
        command: 'upgrade-self'
        image: ${{ inputs.image }}
        args: ${{ steps.arguments.outputs.args }}

    - name: 'Upgrade myparcelnl/pdk'
      uses: myparcelnl/actions/pdk-builder@v4
      if: inputs.image && steps.upgrade-check.outputs.needs-pdk-upgrade == 'true'
      with:
        command: 'upgrade'
        image: ${{ inputs.image }}
        args: 'myparcelnl/pdk ${{ steps.arguments.outputs.args }}'

    - name: 'Upgrade @myparcel-pdk/*'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.upgrade-check.outputs.needs-all-upgrade == 'true'
      with:
        command: 'upgrade'
        image: ${{ inputs.image }}
        args: '@myparcel-pdk/* ${{ steps.arguments.outputs.args }}'

    - name: 'Create report'
      if: inputs.report == 'true'
      id: report
      shell: bash
      env:
        REPORT_FILE: ${{ inputs.report-file }}
      # language=bash
      run: |
        if [ ! -f $REPORT_FILE ]; then
          echo 'has-report=false' >> $GITHUB_OUTPUT
          exit 0
        fi

        JSON=$(cat $REPORT_FILE | jq -c 'sort_by(.name)')

        echo "## PDK upgrade summary" >> $GITHUB_STEP_SUMMARY
        echo ""                       >> $GITHUB_STEP_SUMMARY

        if [ $(echo "${JSON}" | jq '. | length') -eq 0 ]; then
            echo "No packages were upgraded." >> $GITHUB_STEP_SUMMARY
            exit 0
        fi

        echo "The following packages were upgraded:"   >> $GITHUB_STEP_SUMMARY
        echo ""                                        >> $GITHUB_STEP_SUMMARY
        echo "| Package | Old version | New version |" >> $GITHUB_STEP_SUMMARY
        echo "| ------- | ----------- | ----------- |" >> $GITHUB_STEP_SUMMARY

        for row in $(echo "${JSON}" | jq -cr '.[]'); do
            NAME=$(echo $row | jq -r '.name')
            OLD_VERSION=$(echo $row | jq -r '.oldVersion')
            NEW_VERSION=$(echo $row | jq -r '.version')
            REPOSITORY=$(echo $row | jq -r '.repository')

            echo "| [\`$NAME\`]($REPOSITORY) | ~~$OLD_VERSION~~ | **$NEW_VERSION** |" >> $GITHUB_STEP_SUMMARY
        done

        echo 'has-report=true'   >> $GITHUB_OUTPUT
        echo 'summary<<EOF'      >> $GITHUB_OUTPUT
        cat $GITHUB_STEP_SUMMARY >> $GITHUB_OUTPUT
        echo 'EOF'               >> $GITHUB_OUTPUT

    - uses: myparcelnl/actions/create-or-update-comment@v4
      if: github.event_name == 'pull_request' && inputs.report == 'true' && steps.report.outputs.has-report == 'true'
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}
        identifier: 'pdk-upgrade-report'
        issue-number: ${{ github.event.pull_request.number }}
        body: |-
          ${{ steps.report.outputs.summary }}

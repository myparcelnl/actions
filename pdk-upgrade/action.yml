name: 'Run PDK app builder'
description: 'Run @myparcel-pdk/app-builder'

inputs:
  app-id:
    required: false
    description: 'The app ID of the app. Needed when writing a report.'

  private-key:
    required: false
    description: 'The private key of the app. Needed when writing a report.'

  image:
    description: 'PHP Docker image to use. Required to update myparcelnl/pdk.'
    required: false

  mode:
    description: 'Determines which parts of the PDK to setup and upgrade. Can be "frontend", "backend" or "all" for both.'
    required: false
    default: 'all'

  ###
  # @myparcel/pdk-builder arguments
  ###

  commit-type:
    description: 'Commit type. Set to "auto" to infer from the version increase of the upgraded dependency. If set manually, should be a conventional commit type.'
    required: false
    default: 'auto'

  no-check:
    description: 'Skip checking whether the lockfile is modified.'
    required: false
    default: 'false'

  no-commit:
    description: 'Skip creating a commit for the changes.'
    required: false
    default: 'false'

  report:
    description: 'Output a JSON report of the changes.'
    required: false
    default: 'true'

  report-file:
    description: 'Filename for the JSON report.'
    required: false
    default: 'upgrade-report.json'

  args:
    description: 'Additional arguments to pass to @myparcel/app-builder. Should be multiline string.'
    required: false

runs:
  using: composite
  steps:
    - uses: myparcelnl/actions/setup-git-credentials@v4
      id: credentials
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}

    - name: 'Check if upgrade is needed'
      shell: bash
      id: vars-check
      env:
        GITHUB_TOKEN: ${{ steps.credentials.outputs.token }}
      # language=bash
      run: |
        updateTimestamp=$(gh variable get PDK_LAST_UPDATE_TIMESTAMP || echo '')
        upgradedTimestamp=$(gh variable get PDK_UPGRADED_TIMESTAMP || echo '')

        echo "update-timestamp=$updateTimestamp"     >> $GITHUB_OUTPUT
        echo "upgraded-timestamp=$upgradedTimestamp" >> $GITHUB_OUTPUT

        # if both are set, check if the upgrade is older than the last update
        if [ -n "$updateTimestamp" ] && [ -n "$upgradedTimestamp" ]; then
          if [ "$upgradedTimestamp" -lt "$updateTimestamp" ]; then
            echo "PDK was updated since the last upgrade, needs upgrade."
            echo "needs-update=true" >> $GITHUB_OUTPUT
          else
            echo "PDK was not updated since the last upgrade, no upgrade needed."
            echo "needs-update=false" >> $GITHUB_OUTPUT
          fi
        fi

    - uses: myparcelnl/actions/create-cache-keys@v4
      id: cache-keys
      with:
        key: 'upgrade'
        input: |
          ${{ steps.vars-check.outputs.update-timestamp }}
          ${{ github.run_id }}
          ${{ github.run_attempt }}

    - uses: actions/cache@v4
      id: upgrade-cache
      env:
        RUNNER_DEBUG: 0
      with:
        key: ${{ steps.cache-keys.outputs.key }}
        restore-keys: ${{ steps.cache-keys.outputs.restore-keys }}
        path: |
          ./composer.json
          ./composer.lock
          ./package.json
          ./yarn.lock
          ./pdk-upgrade.lock

    - name: 'Check latest available versions'
      if: steps.vars-check.outputs.needs-update == '' || steps.vars-check.outputs.needs-update == 'true'
      uses: actions/github-script@v7
      id: versions
      env:
        MODE: ${{ inputs.mode }}
        LOCKFILE_NAME: 'pdk-upgrade.lock'
      with:
        github-token: ${{ steps.credentials.outputs.token }}
        # language=javascript
        script: |
          const fs = require('fs');
          const mode = process.env.MODE;
          const lockfileName = process.env.LOCKFILE_NAME;

          /**
           * Key -> value pairs of the outputs to set
           */
          const outputs = {
            'app-builder-version': '',
            'js-pdk-version': '',
            'pdk-version': '',
            'from-cache': false,
          };

          if (fs.existsSync(lockfileName)) {
            core.debug(`Reading lockfile from ${lockfileName}`);
            const lockfile = fs.readFileSync(lockfileName, 'utf8');
            const lock = JSON.parse(lockfile);

            Object.assign(outputs, { ...lock, 'from-cache': true });
          }

          core.debug(`Current outputs: ${JSON.stringify(outputs)}`);

          const hasBackendLock = Boolean(outputs['pdk-version']);
          const hasFrontendLock = Boolean(outputs['app-builder-version']) && Boolean(outputs['js-pdk-version']);

          const hasBackendMode = (mode === 'all' || mode === 'backend');
          const hasFrontendMode = (mode === 'all' || mode === 'frontend');

          if (!hasBackendLock && hasBackendMode) {
            core.debug('Fetching latest PDK release');
            const pdkRelease = await github.rest.repos.getLatestRelease({
              owner: 'myparcelnl',
              repo: 'pdk',
            });

            outputs['pdk-version'] = pdkRelease.data.tag_name;
          }

          if (!hasFrontendLock && hasFrontendMode) {
            core.debug('Fetching latest JS-PDK release');
            const jsPdkReleases = await github.rest.repos.listReleases({
              owner: 'myparcelnl',
              repo: 'js-pdk',
            });

            const APP_BUILDER = '@myparcel-pdk/app-builder';

            const lastAppBuilderRelease = jsPdkReleases.data.find((release) => release.name.includes(APP_BUILDER));
            const lastJsPdkRelease = jsPdkReleases.data.find((release) => !release.name.includes(APP_BUILDER));

            outputs['app-builder-version'] = lastAppBuilderRelease?.tag_name ?? '';
            outputs['js-pdk-version'] = lastJsPdkRelease?.tag_name ?? '';
          }

          Object.entries(outputs).forEach(([key, value]) => {
            core.debug(`Setting output "${key}" to "${value}"`);
            core.setOutput(key, value);
          });

          core.debug(`Writing lockfile to ${lockfileName} with contents ${JSON.stringify(outputs)}`);
          fs.writeFileSync(lockfileName, JSON.stringify(outputs));

    - name: 'Check if upgrades are needed (old)'
      if: steps.vars-check.outputs.need-update == '' || steps.vars-check.outputs.need-update == 'true'
      id: upgrade-check
      shell: bash
      env:
        MODE: ${{ inputs.mode }}
        PDK_VERSION: ${{ steps.versions.outputs.pdk-version }}
        APP_BUILDER_VERSION: ${{ steps.versions.outputs.app-builder-version }}
        JS_PDK_VERSION: ${{ steps.versions.outputs.js-pdk-version }}
      # language=bash
      run: |
        # Check if PDK needs to be upgraded
        if [ "$MODE" == 'all' ] || [ "$MODE" == 'backend' ]; then
          pdkVersion="${PDK_VERSION#v}"
          currentPdkVersion=$(jq -r '.packages[] | select(.name == "myparcelnl/pdk") | .version' < composer.lock)

          needsPdkUpgrade=$(echo "$currentPdkVersion" | grep -q "$pdkVersion" && echo 'false' || echo 'true')
        fi

        # Check if JS-PDK needs to be upgraded
        if [ "$MODE" == 'all' ] || [ "$MODE" == 'frontend' ]; then
          appBuilderVersion=$(echo $APP_BUILDER_VERSION | awk -F'@' '{print $NF}')
          jsPdkPackage=$(echo $JS_PDK_VERSION | awk -F'@' '{print $1 "@" $2}')
          jsPdkVersion=$(echo $JS_PDK_VERSION | awk -F'@' '{print $NF}')

          function check-yarn-upgrade() {
            package=$1
            version=$2

            yarn npm info "$package" --json | jq -r '.version' | grep -q "$version" && echo 'false' || echo 'true'
          }

          needsAppBuilderUpgrade=$(check-yarn-upgrade "@myparcel-pdk/app-builder" "$appBuilderVersion")
          needsJsPdkUpgrade=$(check-yarn-upgrade "$jsPdkPackage" "$jsPdkVersion")
        fi

        echo "needs-app-builder-upgrade=${needsAppBuilderUpgrade:-false}" >> $GITHUB_OUTPUT
        echo "needs-js-pdk-upgrade=${needsJsPdkUpgrade:-false}"           >> $GITHUB_OUTPUT
        echo "needs-pdk-upgrade=${needsPdkUpgrade:-false}"                >> $GITHUB_OUTPUT

        if [ "$needsAppBuilderUpgrade" == 'true' ] || [ "$needsJsPdkUpgrade" == 'true' ] || [ "$needsPdkUpgrade" == 'true' ]; then
          echo "needs-upgrade=true" >> $GITHUB_OUTPUT
        else
          echo "needs-upgrade=false" >> $GITHUB_OUTPUT
        fi

    - name: 'Create empty report file'
      if: inputs.report == 'true' && steps.upgrade-check.outputs.needs-upgrade == 'true' && steps.upgrade-cache.outputs.cache-hit != 'true'
      shell: bash
      env:
        REPORT_FILE: ${{ inputs.report-file }}
      #language=bash
      run: echo '[]' > $REPORT_FILE

    - uses: myparcelnl/actions/format-string@v4
      id: args
      with:
        mode: 'args'
        output-separator: '\n'
        string: |
          ${{ inputs.args }}
          ${{ inputs.commit-type && format('--commit-type={0}', inputs.commit-type) }}
          ${{ inputs.no-check == 'true' && '--no-check' }}
          ${{ inputs.no-commit == 'true' && '--no-commit' }}
          ${{ inputs.report == 'true' && '--report' }}
          ${{ inputs.report-file && format('--report-file={0}', inputs.report-file) }}

    - name: 'Upgrade app-builder'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.upgrade-check.outputs.needs-app-builder-upgrade == 'true'
      with:
        command: 'upgrade-self'
        image: ${{ inputs.image }}
        args: ${{ steps.args.outputs.string }}

    - name: 'Upgrade php'
      uses: myparcelnl/actions/pdk-builder@v4
      if: inputs.image && steps.upgrade-check.outputs.needs-pdk-upgrade == 'true'
      with:
        command: 'upgrade-php'
        image: ${{ inputs.image }}
        args: ${{ steps.args.outputs.string }}

    - name: 'Upgrade js'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.upgrade-check.outputs.needs-js-pdk-upgrade == 'true'
      with:
        command: 'upgrade-js'
        image: ${{ inputs.image }}
        args: ${{ steps.args.outputs.string }}

    - name: 'Create report'
      if: inputs.report == 'true' && steps.upgrade-cache.outputs.cache-hit != 'true'
      id: report
      shell: bash
      env:
        REPORT_FILE: ${{ inputs.report-file }}
        FROM_CACHE: ${{ steps.versions.outputs.from-cache }}
      # language=bash
      run: |
        if [ ! -f $REPORT_FILE ]; then
          echo 'has-report=false' >> $GITHUB_OUTPUT
          exit 0
        fi

        JSON=$(cat $REPORT_FILE | jq -c 'sort_by(.name)')

        echo "## PDK upgrade summary" >> $GITHUB_STEP_SUMMARY
        echo ""                       >> $GITHUB_STEP_SUMMARY

        if [ "$FROM_CACHE" == 'true' ]; then
          echo "Upgrades were restored from cache from another step in this job." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi


        if [ $(echo "${JSON}" | jq '. | length') -eq 0 ]; then
            echo "No packages were upgraded." >> $GITHUB_STEP_SUMMARY
            exit 0
        fi

        echo "The following packages were upgraded:"   >> $GITHUB_STEP_SUMMARY
        echo ""                                        >> $GITHUB_STEP_SUMMARY
        echo "| Package | Old version | New version |" >> $GITHUB_STEP_SUMMARY
        echo "| ------- | ----------- | ----------- |" >> $GITHUB_STEP_SUMMARY

        for row in $(echo "${JSON}" | jq -cr '.[]'); do
            NAME=$(echo $row | jq -r '.name')
            OLD_VERSION=$(echo $row | jq -r '.oldVersion')
            NEW_VERSION=$(echo $row | jq -r '.version')
            REPOSITORY=$(echo $row | jq -r '.repository')

            echo "| [\`$NAME\`]($REPOSITORY) | ~~$OLD_VERSION~~ | **$NEW_VERSION** |" >> $GITHUB_STEP_SUMMARY
        done

        echo 'has-report=true'   >> $GITHUB_OUTPUT
        echo 'summary<<EOF'      >> $GITHUB_OUTPUT
        cat $GITHUB_STEP_SUMMARY >> $GITHUB_OUTPUT
        echo 'EOF'               >> $GITHUB_OUTPUT

    - uses: myparcelnl/actions/create-or-update-comment@v4
      if: github.event_name == 'pull_request' && inputs.report == 'true' && steps.report.outputs.has-report == 'true'
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}
        identifier: 'pdk-upgrade-report'
        issue-number: ${{ github.event.pull_request.number }}
        body: |-
          ${{ steps.report.outputs.summary }}

    - name: 'Update variables'
      env:
        GITHUB_TOKEN: ${{ steps.credentials.outputs.token }}
      shell: bash
      # language=bash
      run: |
        gh variable set PDK_UPGRADED_TIMESTAMP --body "$(date +%s)"

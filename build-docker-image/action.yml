name: Build Docker image
description: Build Docker image from cache

inputs:
  image:
    description: 'Image name'
    required: true

  key:
    description: 'Cache key'
    required: false
    default: ${{ github.workflow }}

  dockerfile:
    description: 'Path to dockerfile'
    required: false
    default: Dockerfile

  context:
    description: 'Directory to build from'
    required: false
    default: .

  docker-args:
    description: 'Arguments to pass to docker build'
    required: false
    default: ''

  prune-after:
    description: 'Amount of time after which images get pruned'
    required: false
    default: '260h'

  buildkit:
    description: 'Whether to use Docker BuildKit'
    required: false
    default: 'false'

outputs:
  tagged-image:
    description: 'Created image name with tag'
    value: ${{ steps.prep.outputs.tagged-image }}
  tag:
    description: 'Tag of the created image'
    value: ${{ steps.prep.outputs.tag }}

runs:
  using: composite
  steps:
    - name: 'Prepare'
      id: prep
      shell: bash
      #language=bash
      run: |
        IMAGE=$(echo ${{ inputs.image }})
        ARGS=$(echo ${{ inputs.docker-args }} | shasum | head -c 40)
        TAG=$(echo $GITHUB_SHA | head -c7)
        echo "args=${ARGS}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "tagged-image=${IMAGE}:${TAG}" >> $GITHUB_OUTPUT

    - uses: satackey/action-docker-layer-caching@v0.0.11
      with:
        key: ${{ inputs.key }}-{hash}
        restore-keys: |
          ${{ inputs.key }}-

    - name: 'Build image'
      shell: bash
      #language=bash
      run: >
        docker build ${{ inputs.docker-args }} \
          --label args=${{ steps.prep.outputs.args }} \
          --label ref=${{ github.ref }} \
          --label tag=${{ steps.prep.outputs.tag }} \
          --tag ${{ steps.prep.outputs.tagged-image }} \
          --file ${{ inputs.dockerfile }} \
          ${{ inputs.context }}
      env:
        DOCKER_BUILDKIT: ${{ inputs.buildkit == 'false' && '0' || '1' }}

    - name: 'Prune previous images'
      shell: bash
      #language=bash
      run: >
        docker image prune \
          --all \
          --force \
          --filter "label=ref=${{ github.ref }}" \
          --filter "label=args=${{ steps.prep.outputs.args }}" \
          --filter "label!=tag=${{ steps.prep.outputs.tag }}"

    - name: 'Prune stale images'
      shell: bash
      #language=bash
      run: >
        docker image prune \
          --force \
          --filter "until=${{ inputs.prune-after }}"

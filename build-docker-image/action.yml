name: Build Docker image
description: Build Docker image from cache

inputs:
  image:
    description: 'Image name'
    required: false
    default: ${{ github.repository }}

  key:
    description: 'Cache key'
    required: false
    default: ${{ github.workflow }}

  dockerfile:
    description: 'Path to dockerfile'
    required: false
    default: Dockerfile

  context:
    description: 'Directory to build from'
    required: false
    default: .

  docker-args:
    description: 'Arguments to pass to docker build'
    required: false
    default: ''

  prune-after:
    description: 'Amount of time after which images get pruned'
    required: false
    default: '260h'

  buildkit:
    description: 'Whether to use Docker BuildKit'
    required: false
    default: 'false'

outputs:
  tagged-image:
    description: 'Created image name with tag'
    value: ${{ steps.prep.outputs.tagged-image }}
  tag:
    description: 'Tag of the created image'
    value: ${{ steps.prep.outputs.tag }}

runs:
  using: composite
  steps:
    - uses: myparcelnl/actions/format-string@v4
      id: args
      with:
        mode: 'args'
        string: ${{ inputs.docker-args }}

    - name: 'Prepare'
      id: prep
      shell: bash
      env:
        IMAGE: ${{ inputs.image }}
        ARGS: ${{ steps.docker-args.outputs.string }}}
      #language=bash
      run: |
        TAG=$(echo $GITHUB_SHA | head -c7)

        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "tagged-image=${IMAGE}:${TAG}" >> $GITHUB_OUTPUT

    - uses: satackey/action-docker-layer-caching@v0.0.11
      with:
        key: ${{ inputs.key }}-{hash}
        restore-keys: |
          ${{ inputs.key }}-

    - name: 'Build image'
      shell: bash
      env:
        ARGS: ${{ steps.args.outputs.string }}
        TAG: ${{ steps.prep.outputs.tag }}
        REF: ${{ github.ref }}
        FILE: ${{ inputs.dockerfile }}
        CONTEXT: ${{ inputs.context }}
        DOCKER_BUILDKIT: ${{ inputs.buildkit == 'true' && '1' || '0' }}
      #language=bash
      run: |
        docker build $ARGS \
          --label "ref=$REF" \
          --label "tag=$TAG" \
          --tag "$TAGGED_IMAGE" \
          --file "$FILE" \
          "$CONTEXT"

    - name: 'Prune previous images'
      shell: bash
      env:
        TAG: ${{ steps.prep.outputs.tag }}
        ARGS: ${{ steps.args.outputs.string }}
        REF: ${{ github.ref }}
      #language=bash
      run: |
        docker image prune \
          --all \
          --force \
          --filter "label=ref=$REF" \
          --filter "label=args=$ARGS" \
          --filter "label!=tag=$TAG"

    - name: 'Prune stale images'
      shell: bash
      env:
        PRUNE_AFTER: ${{ inputs.prune-after }}
      #language=bash
      run: |
        docker image prune \
          --force \
          --filter "until=$PRUNE_AFTER"

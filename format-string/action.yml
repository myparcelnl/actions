name: 'Format string'
description: 'Format a string'

inputs:
  string:
    description: 'The string to format. Can be empty or multiple lines.'
    required: true

  input-separator:
    description: 'The separator to use when splitting input to multiple lines.'
    required: false
    default: '\n'

  output-separator:
    description: 'The separator to use for the generated output string.'
    required: false
    default: ' '

  deduplicate:
    description: 'Whether to deduplicate the lines before joining. Always done if mode is "args".'
    required: false
    default: 'false'

  sort:
    description: 'Whether to sort the lines before joining.'
    required: false
    default: 'false'

  mode:
    description: 'The mode to use for formatting. Set to "args" to deduplicate key-value pairs.'
    required: false
    default: 'default'

outputs:
  string:
    description: 'The formatted string.'
    value: ${{ steps.format.outputs.result }}

runs:
  using: composite
  steps:
    - name: 'Format string'
      id: format
      uses: actions/github-script@v7
      env:
        INPUT_SEPARATOR: ${{ inputs.input-separator }}
        OUTPUT_SEPARATOR: ${{ inputs.output-separator }}
        DEDUPLICATE: ${{ inputs.deduplicate }}
        SORT: ${{ inputs.sort }}
        MODE: ${{ inputs.mode }}
        STRING: ${{ inputs.string }}
      with:
        result-encoding: 'string'
        #language=javascript
        script: |
          const MODE_ARGS = 'args';

          const mode = String(process.env.MODE);
          const inputSeparator = String(process.env.INPUT_SEPARATOR);
          const outputSeparator = String(process.env.OUTPUT_SEPARATOR);
          const deduplicate = Boolean(process.env.DEDUPLICATE) || MODE_ARGS === mode;
          const sort = Boolean(process.env.SORT);
          const inputString = process.env.STRING?.trim() ?? '';

          if (!inputString) {
            return '';
          }

          let lines = inputString.split(inputSeparator).map((line) => line.trim()).filter(Boolean);

          // Handle `args` mode to keep last occurrence of key-value pairs
          if (MODE_ARGS === mode) {
            const uniqueArgs = lines.reduce((acc, arg) => {
              // Check if it's a key-value pair
              const [key, value] = arg.includes('=')
                ? arg.split('=')
                : [arg, null];

              // Store or overwrite the key with its latest occurrence
              acc[key] = value ? `${key}=${value}` : key;

              return acc;
            }, {});

            // Convert the result back into an array of unique arguments
            lines = Object.values(uniqueArgs);
          }

          // Optionally deduplicate
          if (deduplicate) {
            lines = [...new Set(lines)];
          }

          // Optionally sort
          if (sort) {
            lines.sort();
          }

          // Join result by output separator and set output
          return lines.join(outputSeparator);

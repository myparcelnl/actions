name: 'Run PHPStan'
description: 'Set up PHP and run PHPStan'

inputs:
  command:
    description: 'The PHPStan command to run.'
    required: false
    default: 'analyse'

  config-file:
    description: 'PHPStan configuration file'
    required: false
    default: ''

  cache-dir:
    description: 'PHPStan cache directory'
    required: false
    default: '/tmp/phpstan'

  cache-hash:
    description: 'Hash to use for caching'
    required: false
    default: ${{ hashFiles('**/*.php') }}

  image:
    description: 'PHP Docker image to use'
    required: false
    default: ''

  php-version:
    description: 'PHP version to use. If image is set, this will be ignored.'
    default: '7.4'
    required: false

runs:
  using: composite
  steps:
    - name: 'Prepare variables'
      id: prepare
      shell: bash
      env:
        CONFIG_FILE: ${{ inputs.config-file }}
      #language=bash
      run: |
        ARGS=""

        if [ -n "$CONFIG_FILE" ]; then
          ARGS="$ARGS --configuration $CONFIG_FILE"
        fi

        echo "args=$ARGS" >> $GITHUB_OUTPUT

    - uses: myparcelnl/actions/create-cache-keys@v4
      id: keys-phpstan
      with:
        key: 'phpstan-cache'
        input: |
          ${{ hashFiles('phpstan.neon.dist', 'composer.json') }}
          ${{ inputs.cache-hash }}

    - name: 'Handle PHPStan cache'
      uses: actions/cache@v4
      id: phpstan-cache
      with:
        path: ${{ inputs.cache-dir }}
        key: ${{ steps.keys-phpstan.outputs.key }}
        restore-keys: ${{ steps.keys-phpstan.outputs.restore-keys }}

    - uses: myparcelnl/actions/composer-install@v4
      id: setup
      if: steps.phpstan-cache.outputs.cache-hit != 'true'
      with:
        php-version: ${{ vars.PHP_VERSION }}

    - uses: myparcelnl/actions/composer-create-env-file@v4
      id: env

    - name: 'Run PHPStan analysis'
      if: steps.phpstan-cache.outputs.cache-hit != 'true'
      env:
        ARGS: ${{ inputs.args }}
        ENV_FILE: ${{ steps.env.outputs.filename }}
        IMAGE: ${{ steps.setup.outputs.image }}
      shell: bash
      #language=bash
      run: |
        docker run -t \
          --env-file "$ENV_FILE" \
          --user $(id -u):$(id -g) \
          --volume $PWD:/app \
          "$IMAGE" \
          php -dmemory_limit=-1 vendor/bin/phpstan \
            analyse \
            --no-progress \
            --no-interaction

name: 'Run PHPStan'
description: 'Set up PHP and run PHPStan'

inputs:
  command:
    description: 'The PHPStan command to run.'
    required: false
    default: 'analyse'

  config-file:
    description: 'PHPStan configuration file'
    required: false

  cache-dir:
    description: 'PHPStan cache directory'
    required: false
    default: '/tmp/phpstan'

  cache-hash:
    description: 'Hash to use for caching'
    required: false
    default: ${{ hashFiles('**/*.php') }}

  image:
    description: 'PHP Docker image to use'
    required: false

  php-version:
    description: 'PHP version to use. If image is set, this will be ignored.'
    default: '7.4'
    required: false

  php-args:
    description: 'Arguments to pass to PHP. Should be a multiline string.'
    required: false

  phpstan-args:
    description: 'Arguments to pass to PhpStan. Should be a multiline string.'
    required: false

runs:
  using: composite
  steps:
    - uses: myparcelnl/actions/create-cache-keys@v4
      id: keys-phpstan
      with:
        key: 'phpstan-cache'
        input: |
          ${{ hashFiles('phpstan.neon.dist', 'composer.json') }}
          ${{ inputs.cache-hash }}

    - name: 'Handle PHPStan cache'
      uses: actions/cache@v4
      with:
        path: ${{ inputs.cache-dir }}
        key: ${{ steps.keys-phpstan.outputs.key }}
        restore-keys: ${{ steps.keys-phpstan.outputs.restore-keys }}

    - uses: myparcelnl/actions/composer-install@v4
      id: setup
      if: inputs.image == ''
      with:
        php-version: ${{ inputs.php-version }}

    - uses: myparcelnl/actions/composer-create-env-file@v4
      id: env

    - uses: myparcelnl/actions/format-string@v4
      id: php-args
      with:
        mode: 'args'
        string: |
          -dmemory_limit=-1
          ${{ inputs.php-args }}

    - uses: myparcelnl/actions/format-string@v4
      id: phpstan-args
      with:
        mode: 'args'
        string: |
          --error-format=github
          --memory-limit=2G
          --no-interaction
          --no-progress
          ${{ runner.debug == '1' && '--debug' || '' }}
          ${{ inputs.config-file && '--configuration=$CONFIG_FILE' || '' }}
          ${{ inputs.phpstan-args }}

    - name: 'Run PhpStan'
      env:
        COMMAND: ${{ inputs.command }}
        ENV_FILE: ${{ steps.env.outputs.filename }}
        IMAGE: ${{ inputs.image || steps.install.outputs.image }}
        PHPSTAN_ARGS: ${{ steps.phpstan-args.outputs.string }}
        PHP_ARGS: ${{ steps.php-args.outputs.string }}
        TERM: xterm-256color
      shell: bash
      #language=bash
      run: |
        docker run -t \
          --env-file="$ENV_FILE" \
          --user $(id -u):$(id -g) \
          --volume "$PWD:/app" \
          "$IMAGE" \
          php $PHP_ARGS vendor/bin/phpstan "$COMMAND" $PHPSTAN_ARGS

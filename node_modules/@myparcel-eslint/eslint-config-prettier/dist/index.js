var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var prettierConfig = {
  plugins: [
    "prettier"
  ],
  extends: [
    "plugin:prettier/recommended"
  ],
  rules: {
    "prettier/prettier": [
      "warn",
      {
        printWidth: 120
      }
    ],
    "array-bracket-newline": "off",
    "array-element-newline": "off",
    "function-call-argument-newline": "off",
    "function-paren-newline": "off",
    "implicit-arrow-linebreak": "off",
    "newline-after-var": "off",
    "newline-before-return": "off",
    "newline-per-chained-call": "off",
    "no-extra-parens": "off",
    "no-mixed-spaces-and-tabs": "off",
    "no-multi-spaces": "off",
    "no-multiple-empty-lines": "off",
    "no-tabs": "off",
    "no-trailing-spaces": "off",
    "no-whitespace-before-property": "off",
    "object-curly-newline": "off",
    "object-property-newline": "off",
    "operator-linebreak": "off",
    quotes: "off",
    semi: "off",
    "space-before-blocks": "off",
    "space-before-function-paren": "off",
    "space-in-parens": "off",
    "space-infix-ops": "off",
    "space-unary-ops": "off"
  }
};
var src_default = prettierConfig;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});

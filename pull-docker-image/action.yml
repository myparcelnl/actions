name: 'Pull Docker image'
description: 'Pull Docker image from registry, or load it from cache.'

inputs:
  image:
    description: 'Image name'
    required: true

  cache-directory:
    description: 'Directory to store cache in'
    required: false
    default: '/tmp/cache/docker'

outputs:
  image:
    description: 'Image name'
    value: ${{ inputs.image }}

runs:
  using: composite
  steps:
    - name: 'Prepare'
      id: prepare
      env:
        IMAGE: ${{ inputs.image }}
        CACHE_DIR: ${{ inputs.cache-directory }}
      shell: bash
      #language=bash
      run: |
        hash=$(echo "$IMAGE" | md5sum | cut -d ' ' -f 1)

        echo "tag=$(echo "$IMAGE" | cut -d ':' -f 2)" >> $GITHUB_OUTPUT
        echo "image-name=$(echo "$IMAGE" | cut -d ':' -f 1)" >> $GITHUB_OUTPUT
        echo "filename=image-$hash.tar" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      id: cache
      with:
        path: ${{ inputs.cache-directory }}
        key: ${{ format('{0}{1}-docker-image-{2}-{3}', runner.os, runner.arch, steps.prepare.outputs.image-name, steps.prepare.outputs.tag) }}
        restore-keys: |
          ${{ format('{0}{1}-docker-image-{2}', runner.os, runner.arch, steps.prepare.outputs.image-name) }}

    - name: 'Get Docker image'
      env:
        CACHE_HIT: ${{ steps.cache.outputs.cache-hit }}
        CACHE_DIR: ${{ inputs.cache-directory }}
        FILENAME: ${{ steps.prepare.outputs.filename }}
        IMAGE: ${{ inputs.image }}
        DEBUG: ${{ runner.debug == '1' && 'true' || '' }}
      shell: bash
      #language=bash
      run: |
        echo "::group::Get Docker image"

        if ! docker image inspect "$IMAGE" > /dev/null 2>&1; then
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo "Loading image from cache..."

            if ! docker load -i "$CACHE_DIR/$FILENAME"; then
              echo "::warning::Failed to load image from cache, falling back to registry pull."
            fi
          fi

          if ! docker image inspect "$IMAGE" > /dev/null 2>&1; then
            echo "Image not found locally, pulling from registry..."

            if ! docker pull "$IMAGE"; then
              echo "::warning::Pull failed. Attempting without cache..."
              docker pull --no-cache "$IMAGE" || { echo "::error::Failed to pull image. Exiting."; exit 1; }
            fi
          fi
        else
          echo "Image $IMAGE is already present locally."
        fi

        if [[ "$CACHE_HIT" == 'true' ]]; then
          echo "::endgroup::"
          exit 0
        fi

        echo "Saving image to cache..."
        mkdir -p "$CACHE_DIR"

        if [[ "$DEBUG" == 'true' ]]; then
          echo "::debug::Cache directory contents:"
          ls -lah "$CACHE_DIR"
        fi

        if [ -f "$CACHE_DIR/$FILENAME" ]; then
          echo "Removing existing cached file: $CACHE_DIR/$FILENAME"
          rm -f "$CACHE_DIR/$FILENAME"
        fi

        if ! docker save -o "$CACHE_DIR/$FILENAME" "$IMAGE"; then
          echo "::warning::Saving image failed. Retrying..."
          docker save -o "$CACHE_DIR/$FILENAME" "$IMAGE" || { echo "::error::Failed to save image. Exiting."; exit 1; }
        fi

        echo "Image $IMAGE saved as $FILENAME to $CACHE_DIR."

        if [[ "$DEBUG" == 'true' ]]; then
          echo "::debug::New cache directory contents:"
          ls -lah "$CACHE_DIR"
        fi

        echo "::endgroup::"

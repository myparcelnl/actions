name: 'Pull Docker image'
description: 'Pull Docker image from registry, or load it from cache.'

inputs:
  image:
    description: 'Image name'
    required: true

  cache-directory:
    description: 'Directory to store cache in'
    required: false
    default: '~/.docker-cache'

outputs:
  image:
    description: 'Image name'
    value: ${{ inputs.image }}

runs:
  using: composite
  steps:
    - uses: actions/cache@v3
      id: docker-cache
      with:
        path: ${{ inputs.cache-directory }}
        key: ${{ runner.os }}-cache-docker-${{ inputs.image }}

    - name: 'Generate image name'
      id: hash
      shell: bash
      run: |
        echo "filename=$(echo ${{ inputs.image }} | md5sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

    - name: 'Load cached Docker image'
      if: steps.docker-cache.outputs.cache-hit == 'true'
      shell: bash
      run: |
        docker load -i ${{ inputs.cache-directory }}/image-${{ steps.hash.outputs.filename }}.tar

    - name: 'Pull Docker image'
      if: steps.docker-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # if not present, pull from registry
        EXISTS=$(docker image inspect ${{ inputs.image }} > /dev/null 2>&1))
        # if image is not present, pull it

        if [ $? -ne 0 ]; then
          echo "Image not found, pulling from registry"
          docker pull ${{ inputs.image }}
        else
          echo "Image found, skipping pull"
        fi

    - name: 'Save image to disk'
      if: steps.docker-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p ${{ inputs.cache-directory }}
        docker save -o ${{ inputs.cache-directory }}/image-${{ steps.hash.outputs.filename }}.tar ${{ inputs.image }}

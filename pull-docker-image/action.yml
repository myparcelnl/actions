name: 'Pull Docker image'
description: 'Pull Docker image from registry, or load it from cache.'

inputs:
  image:
    description: 'Image name'
    required: true

  cache-directory:
    description: 'Directory to store cache in'
    required: false
    default: '/tmp/cache/docker'

outputs:
  image:
    description: 'Image name'
    value: ${{ inputs.image }}

runs:
  using: composite
  steps:
    - name: 'Prepare'
      id: prepare
      env:
        IMAGE: ${{ inputs.image }}
        CACHE_DIR: ${{ inputs.cache-directory }}
      shell: bash
      #language=bash
      run: |
        mkdir -p "$CACHE_DIR"

        echo "tag=$(echo "$IMAGE" | cut -d ':' -f 2)" >> $GITHUB_OUTPUT
        echo "image-name=$(echo "$IMAGE" | cut -d ':' -f 1)" >> $GITHUB_OUTPUT

        hash=$(echo "$IMAGE" | md5sum | cut -d ' ' -f 1)

        echo "filename=image-$hash.tar" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      id: cache
      with:
        path: ${{ inputs.cache-directory }}
        key: ${{ format('{0}{1}-docker-image-{2}-{3}', runner.os, runner.arch, steps.prepare.outputs.image-name, steps.prepare.outputs.tag) }}
        restore-keys: |
          ${{ format('{0}{1}-docker-image-{2}', runner.os, runner.arch, steps.prepare.outputs.image-name) }}

    - name: 'Load cached Docker image'
      if: steps.cache.outputs.cache-hit == 'true'
      env:
        CACHE_DIR: ${{ inputs.cache-directory }}
        FILENAME: ${{ steps.prepare.outputs.filename }}
      shell: bash
      #language=bash
      run: |
        docker load -i "$CACHE_DIR/$FILENAME"

    - name: 'Pull Docker image'
      if: steps.cache.outputs.cache-hit != 'true'
      env:
        CACHE_DIR: ${{ inputs.cache-directory }}
        FILENAME: ${{ steps.prepare.outputs.filenameh }}
        IMAGE: ${{ inputs.image }}
      shell: bash
      #language=bash
      run: |
        # if not present, pull from registry
        EXISTS=$(docker image inspect "$IMAGE" > /dev/null 2>&1 || echo 0)

        if [ $EXISTS -eq 0 ]; then
          echo "Image not found, pulling from registry"
          # Fallback to not using cache if pull fails 
          docker pull "$IMAGE" || docker pull --no-cache "$IMAGE"
        else
          echo "Image found, skipping pull"
        fi

        # Save image to disk for caching
        mkdir -p "$CACHE_DIR"
        docker save -o "$CACHE_DIR/$FILENAME" "$IMAGE"

        echo "Image $IMAGE saved as $FILENAME to $CACHE_DIR:"
        ls -lh "$CACHE_DIR"

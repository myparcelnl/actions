name: 'Setup node'
description: 'Set up node with Volta or actions/setup-node'

inputs:
  node-version:
    description: 'The Node.js version to use. Leave empty to use Volta version or fallback default version. (20)'
    required: false

  cache:
    description: 'Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.'

  cache-dependency-path:
    description: 'Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.'

  key:
    description: 'The key to look for under volta in package.json.'
    required: false

outputs:
  node-version:
    description: 'The node version that is used.'
    value: ${{ steps.node-version.outputs.version }}

runs:
  using: composite
  steps:
    - name: 'Prepare'
      id: prepare
      env:
        KEY: ${{ inputs.key }}
        NODE_VERSION: ${{ inputs.node-version }}
        PACKAGE_JSON_PATH: ${{ inputs.package-json-path }}
      shell: bash
      #language=bash
      run: |
        version=${NODE_VERSION:-20}

        if [[ -f "package.json" ]] && \
           [ "$(jq ".volta | has(\"node\")" "package.json")" == "true" ] && \
           [[ -z "$KEY" || "$(jq ".volta | has(\"$KEY\")" "package.json")" == "true" ]]
        then
          # If Volta is present, use a manually specified node version if present
          echo "volta=true" >> $GITHUB_OUTPUT
          echo "node-version=${NODE_VERSION}" >> $GITHUB_OUTPUT
        else
          # If Volta is not present, use a fallback node version 
          echo "volta=false" >> $GITHUB_OUTPUT
          echo "node-version=${NODE_VERSION:-20}" >> $GITHUB_OUTPUT
        fi

    - uses: actions/setup-node@v4
      if: steps.prepare.outputs.volta != 'true'
      with:
        node-version: ${{ steps.prepare.outputs.node-version }}
        cache: ${{ inputs.cache }}
        cache-dependency-path: ${{ inputs.cache-dependency-path }}

    - uses: volta-cli/action@v4
      id: volta
      if: steps.prepare.outputs.volta == 'true'
      continue-on-error: true
      with:
        node-version: ${{ steps.prepare.outputs.node-version }}

    # Retry setting up Volta in 3 seconds in case it failed. Seen it happen in the wild...
    - name: 'Wait 3 seconds before retrying...'
      if: steps.prepare.outputs.volta == 'true' && steps.volta.outcome == 'failure'
      shell: bash
      #language=bash
      run: sleep 3

    - name: 'Retry setting up Volta'
      if: steps.prepare.outputs.volta == 'true' && steps.volta.outcome == 'failure'
      uses: volta-cli/action@v4
      with:
        node-version: ${{ steps.prepare.outputs.node-version }}

    # Tries getting the node version 3 times. When using volta you can sometimes get an error while downloading node,
    # causing this command to fail.
    - name: 'Get node version'
      id: node-version
      shell: bash
      #language=bash
      run: |
        MAX_RETRIES=3
        RETRY_COUNT=0
        SUCCESS=false

        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          VERSION=$(node --version) && SUCCESS=true && break
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Attempt $RETRY_COUNT failed. Retrying in 5 seconds..."
          sleep 5
        done

        if [ "$SUCCESS" = true ]; then
          TRIMMED="${VERSION:1}"
          echo "version=$TRIMMED" >> $GITHUB_OUTPUT
        else
          echo "Failed to get Node.js version after $MAX_RETRIES attempts."
          exit 1
        fi

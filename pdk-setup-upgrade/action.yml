name: 'Setup PDK'
description: 'Setup @myparcel-pdk/app-builder'

inputs:
  app-id:
    required: true
    description: 'The app ID of the GitHub app.'

  private-key:
    required: true
    description: 'The private key of the GitHub app.'

  node-version:
    description: 'Node version to use'
    required: false

  yarn-args:
    description: 'Arguments to use with yarn install'
    required: false

  php-version:
    description: 'PHP version to use'
    default: '7.4'
    required: false

  composer-command:
    description: 'The composer command to run.'
    default: 'install'
    required: false

  composer-dev:
    description: 'Whether to install composer dev dependencies.'
    required: false
    default: 'true'

  mode:
    description: 'Determines which parts of the PDK to setup and upgrade. Can be "frontend", "backend" or "all" for both.'
    required: false
    default: 'all'

  no-check:
    description: 'Skip checking whether the lockfile is modified.'
    required: false
    default: 'true'

  no-commit:
    description: 'Skip creating a commit for the changes.'
    required: false
    default: 'true'

outputs:
  image:
    description: 'The image name that was used to setup composer dependencies. Can be used in subsequent jobs.'
    value: ${{ steps.setup-backend.outputs.image }}

  env-file:
    description: 'The filename of the env file that was created.'
    value: ${{ steps.setup-backend.outputs.env-file }}

runs:
  using: composite
  steps:
    - uses: myparcelnl/actions/setup-git-credentials@v4
      id: credentials
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}

    - name: 'Check if upgrade is needed'
      shell: bash
      id: prepare
      env:
        GITHUB_TOKEN: ${{ steps.credentials.outputs.token }}
      # language=bash
      run: |
        updateTimestamp=$(gh variable get PDK_LAST_UPDATE_TIMESTAMP || echo '')
        upgradedTimestamp=$(gh variable get PDK_UPGRADED_TIMESTAMP || echo '')

        echo "update-timestamp=$updateTimestamp"     >> $GITHUB_OUTPUT
        echo "upgraded-timestamp=$upgradedTimestamp" >> $GITHUB_OUTPUT

        # if both are set, check if the upgrade is older than the last update
        if [ -n "$updateTimestamp" ] && [ -n "$upgradedTimestamp" ]; then
          if [ "$upgradedTimestamp" -lt "$updateTimestamp" ]; then
            echo "PDK was updated since the last upgrade, needs upgrade."
            echo "needs-update=true" >> $GITHUB_OUTPUT
          else
            echo "PDK was not updated since the last upgrade, no upgrade needed."
            echo "needs-update=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "PDK was never upgraded or updated, needs upgrade."
          echo "needs-update=true" >> $GITHUB_OUTPUT
        fi

    - uses: myparcelnl/actions/create-cache-keys@v4
      id: cache-keys
      with:
        key: 'upgrade'
        restore-keys: '1'
        input: |
          ${{ hashFiles('composer.json', 'composer.lock', 'package.json', 'yarn.lock') }}
          ${{ steps.prepare.outputs.update-timestamp }}

    - uses: actions/cache@v4
      id: upgrade-cache
      with:
        key: ${{ steps.cache-keys.outputs.key }}
        restore-keys: ${{ steps.cache-keys.outputs.restore-keys }}
        path: |
          composer.json
          composer.lock
          package.json
          yarn.lock
          upgrade-report.json

    - uses: myparcelnl/actions/pdk-setup-backend@v4
      if: inputs.mode == 'all' || inputs.mode == 'backend'
      id: setup-backend
      with:
        composer-command: ${{ inputs.composer-command }}
        composer-dev: ${{ inputs.composer-dev }}
        php-version: ${{ inputs.php-version }}

    - uses: myparcelnl/actions/pdk-setup-frontend@v4
      if: inputs.mode == 'all' || inputs.mode == 'frontend'
      with:
        node-version: ${{ inputs.node-version }}
        yarn-args: ${{ inputs.yarn-args }}

    - name: 'Install yarn deps if not setting up frontend'
      if: inputs.mode == 'backend'
      uses: myparcelnl/actions/yarn-install@v4
      with:
        yarn-args: ${{ inputs.yarn-args }}
        node-version: ${{ inputs.node-version }}

    - name: 'Create empty report file'
      if: steps.prepare.outputs.needs-update == 'true'
      shell: bash
      #language=bash
      run: echo '[]' > upgrade-report.json

    - uses: myparcelnl/actions/format-string@v4
      id: args
      with:
        mode: 'args'
        output-separator: '\n'
        string: |
          ${{ inputs.args }}
          ${{ inputs.no-check == 'true' && '--no-check' }}
          ${{ inputs.no-commit == 'true' && '--no-commit' }}
          --report
          --report-file=upgrade-report.json

    - name: 'Upgrade app-builder'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.prepare.outputs.needs-update == 'true'
      with:
        command: 'upgrade-self'
        args: ${{ steps.args.outputs.string }}

    - name: 'Upgrade js'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.prepare.outputs.needs-update == 'true' && (inputs.mode == 'all' || inputs.mode == 'frontend')
      with:
        command: 'upgrade-js'
        args: ${{ steps.args.outputs.string }}

    - name: 'Upgrade php'
      uses: myparcelnl/actions/pdk-builder@v4
      if: steps.prepare.outputs.needs-update == 'true' && (inputs.mode == 'all' || inputs.mode == 'backend')
      with:
        command: 'upgrade-php'
        image: ${{ steps.setup-backend.outputs.image }}
        env-file: ${{ steps.setup-backend.outputs.env-file }}
        args: ${{ steps.args.outputs.string }}

    - name: 'Create report'
      id: report
      shell: bash
      env:
        FROM_CACHE: ${{ steps.upgrade-cache.outputs.cache-hit == 'true' && 'true' || 'false' }}
      # language=bash
      run: |
        if [ ! -f upgrade-report.json ]; then
          echo 'has-report=false' >> $GITHUB_OUTPUT
          exit 0
        fi

        JSON=$(cat upgrade-report.json | jq -c 'sort_by(.name)')

        echo "## PDK upgrade summary" >> $GITHUB_STEP_SUMMARY
        echo ""                       >> $GITHUB_STEP_SUMMARY

        if [ "$FROM_CACHE" == 'true' ]; then
          echo "Upgrades were restored from cache." >> $GITHUB_STEP_SUMMARY
          exit 0
        fi

        if [ $(echo "${JSON}" | jq '. | length') -eq 0 ]; then
            echo "No packages were upgraded." >> $GITHUB_STEP_SUMMARY
            exit 0
        fi

        echo "The following packages were upgraded:"   >> $GITHUB_STEP_SUMMARY
        echo ""                                        >> $GITHUB_STEP_SUMMARY
        echo "| Package | Old version | New version |" >> $GITHUB_STEP_SUMMARY
        echo "| ------- | ----------- | ----------- |" >> $GITHUB_STEP_SUMMARY

        for row in $(echo "${JSON}" | jq -cr '.[]'); do
            NAME=$(echo $row | jq -r '.name')
            OLD_VERSION=$(echo $row | jq -r '.oldVersion')
            NEW_VERSION=$(echo $row | jq -r '.version')
            REPOSITORY=$(echo $row | jq -r '.repository')

            echo "| [\`$NAME\`]($REPOSITORY) | ~~$OLD_VERSION~~ | **$NEW_VERSION** |" >> $GITHUB_STEP_SUMMARY
        done

        echo 'has-report=true'   >> $GITHUB_OUTPUT
        echo 'summary<<EOF'      >> $GITHUB_OUTPUT
        cat $GITHUB_STEP_SUMMARY >> $GITHUB_OUTPUT
        echo 'EOF'               >> $GITHUB_OUTPUT

    - uses: myparcelnl/actions/create-or-update-comment@v4
      if: github.event_name == 'pull_request' && steps.report.outputs.has-report == 'true'
      with:
        app-id: ${{ inputs.app-id }}
        private-key: ${{ inputs.private-key }}
        identifier: 'pdk-upgrade-report'
        issue-number: ${{ github.event.pull_request.number }}
        body: |-
          ${{ steps.report.outputs.summary }}

    - name: 'Update variables'
      if: steps.prepare.outputs.needs-update == 'true'
      env:
        GITHUB_TOKEN: ${{ steps.credentials.outputs.token }}
      shell: bash
      # language=bash
      run: |
        gh variable set PDK_UPGRADED_TIMESTAMP --body "$(date +%s)"

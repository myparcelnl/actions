name: 'Semantic release'
description: 'Run semantic release using the MyParcel bot'

inputs:
  token:
    description: 'GitHub Personal access token'
    required: true

  semantic-release-args:
    description: 'Semantic release arguments'
    required: false

  write-summary:
    description: 'Write a summary to the GitHub action output'
    required: false
    default: 'false'

outputs:
  version:
    description: 'The new version'
    value: ${{ steps.post-release.outputs.version }}

  previous-version:
    description: 'The previous version'
    value: ${{ steps.post-release.outputs.previous-version }}

  released:
    description: 'Whether a new version was released'
    value: ${{ steps.post-release.outputs.released }}

runs:
  using: composite
  steps:
    - uses: myparcelnl/actions/setup-git-credentials@v2
      with:
        token: ${{ inputs.token }}

    - name: 'Get previous version'
      run: |
        tag=$(git ls-remote --tags --sort="v:refname" | tail -n1 | sed 's/.*\///; s/\^{}//')
        echo "tag=${tag}" >> $GITHUB_OUTPUT
      id: previous-version
      shell: bash

    - name: 'Run semantic release'
      run: npx semantic-release ${{ inputs.semantic-release-args }}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: 'Get new version'
      run: |
        tag=$(git describe --tags --abbrev=0)
        echo "tag=${tag}" >> $GITHUB_OUTPUT
      id: new-version
      shell: bash

    - name: 'Prepare outputs'
      id: post-release
      run: |
        if [ "${{ steps.previous-version.outputs.tag }}" == "${{ steps.new-version.outputs.tag }}" ]; then
          echo "version=" >> $GITHUB_OUTPUT
          echo "previous-version=${{ steps.previous-version.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "released=false" >> $GITHUB_OUTPUT
        else
          echo "version=${{ steps.new-version.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "previous-version=${{ steps.previous-version.outputs.tag }}" >> $GITHUB_OUTPUT
          echo "released=true" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Write job summary'
      if: ${{ inputs.write-summary == 'true' }}
      shell: bash
      run: |
        REPO_URL="https://github.com/${{ github.repository }}"
        NEW_VER=${{ steps.post-release.outputs.version }}

        echo "# Release summary" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.post-release.outputs.released }}" == "true" ]; then
          echo "A new version was released: [$NEW_VER]($REPO_URL/releases/tag/$NEW_VER)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Commits in this release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Summary | Commit |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          git log --pretty=format:"| %s | [%h]($REPO_URL/commit/%H) |" ${{ steps.post-release.outputs.previous-version }}..${{ steps.post-release.outputs.version }} >> $GITHUB_STEP_SUMMARY
        else
          echo "No new version was released." >> $GITHUB_STEP_SUMMARY
        fi

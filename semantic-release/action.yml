name: 'Semantic release'
description: 'Run semantic release using the MyParcel bot'

inputs:
  token:
    description: 'GitHub Personal access token'
    required: true

  write-summary:
    description: 'Write a summary to the GitHub action output'
    required: false
    default: 'false'

  dry-run:
    description: 'Run semantic release in dry-run mode'
    required: false
    default: 'false'

  semantic-release-args:
    description: 'Additional semantic release arguments'
    required: false

outputs:
  version:
    description: 'The version that was just released, prefixed with "v"'
    value: ${{ steps.normalize.outputs.next-version }}

  previous-version:
    description: 'The version before the release, prefixed with "v"'
    value: ${{ steps.normalize.outputs.last-version }}

  version-number:
    description: 'The version number that was just released'
    value: ${{ steps.normalize.outputs.next-version-number }}

  previous-version-number:
    description: 'The version number before the release'
    value: ${{ steps.normalize.outputs.last-version-number }}

  release-type:
    description: 'The type of the new release. Can be "major", "minor", "patch" or "none"'
    value: ${{ steps.normalize.outputs.release-type }}

  released:
    description: 'Whether a new version was released'
    value: ${{ steps.normalize.outputs.released }}

runs:
  using: composite
  steps:
    - name: 'Run semantic release'
      id: release
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
        ARGS: ${{ inputs.semantic-release-args }}
        DRY_RUN_ARG: ${{ inputs.dry-run == 'true' && '--dry-run' || '' }}
      shell: bash
      #language=bash
      run: |
        npx semantic-release $ARGS $DRY_RUN_ARG

    - name: 'Normalize outputs'
      id: normalize
      shell: bash
      #language=bash
      run: |
        LAST_VER=${{ steps.release.outputs.last-version }}
        NEXT_VER=${{ steps.release.outputs.next-version }}
        RELEASE_TYPE=${{ steps.release.outputs.release-type }}

        echo "next-version=${NEXT_VER:+v$NEXT_VER}" >> $GITHUB_OUTPUT
        echo "last-version=${LAST_VER:+v$LAST_VER}" >> $GITHUB_OUTPUT

        echo "next-version-number=${NEXT_VER}" >> $GITHUB_OUTPUT
        echo "last-version-number=${LAST_VER}" >> $GITHUB_OUTPUT

        echo "release-type=${RELEASE_TYPE:-none}" >> $GITHUB_OUTPUT
        echo "released=$( [[ -n "$RELEASE_TYPE" ]] && echo true || echo false )" >> $GITHUB_OUTPUT

    - name: 'Write job summary'
      if: ${{ inputs.write-summary == 'true' }}
      shell: bash
      #language=bash
      run: |
        REPO_URL="https://github.com/${{ github.repository }}"
        LAST_VER=${{ steps.normalize.outputs.last-version }}
        NEXT_VER=${{ steps.normalize.outputs.next-version }}
        RELEASE_TYPE=${{ steps.normalize.outputs.release-type }}

        echo "# Release summary" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.normalize.outputs.released }}" == "true" ]; then
          echo "A new ${RELEASE_TYPE} version was released: [$NEXT_VER]($REPO_URL/releases/tag/$NEXT_VER)" >> $GITHUB_STEP_SUMMARY
          echo ""                                                                               >> $GITHUB_STEP_SUMMARY
          echo "## Commits in this release"                                                     >> $GITHUB_STEP_SUMMARY
          echo ""                                                                               >> $GITHUB_STEP_SUMMARY
          echo "| Summary | Commit |"                                                           >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"                                                                  >> $GITHUB_STEP_SUMMARY
          git log --pretty=format:"| %s | [%h]($REPO_URL/commit/%H) |" ${LAST_VER}..${NEXT_VER} >> $GITHUB_STEP_SUMMARY
        else
          echo "No new version was released." >> $GITHUB_STEP_SUMMARY
        fi
